{'CS0022-3@1': 'public class MysScript:MonoBehaviour\n{\n    public int[,] myArray = new int[10, 10];\n\n    void Start()\n    {\n        Debug.Log(myArray[0, 0]);\n    }\n}\npublic class MonoBehaviour\n{\n}\ninternal class Debug\n{\n    internal static void Log(int v)\n    {\n    }\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n    }\n}', 'CS0022-3@4': 'using System;\npublic class UserMainCode\n{\n    //Assume following return types while writing the code for this question. \n    public static int[,] output1 = new int[10,10];\n    public static void soduko()\n    {\n    }\n    public static void SolveSudoku(int[,] input1)\n    {\n        input1 = new int[9, 9];\n        int i, j;\n        for (i = 0; i < 9; i++)\n            output1[i, 0] = input1[i, 0];\n        soduko();\n\n\n        //Write code here \n    }\n    public static void Main()\n    {\n    }\n}', 'CS0022-3@3': 'public class Test\n{\n    static int[,] a = new int[10,10];\n    public static void Main()\n    {\n        a[0, 1] = 9;\n    }\n}', 'CS0022-3@2': '// CS0022.cs  \npublic class MyClass\n{\n    static int[,] a = new int[10,10];\n    public static void Main()\n    {\n        // a[0] = 0;     // single-dimension array  \n        a[0, 1] = 9;   // CS0022, the array does not have two dimensions  \n    }\n}', 'CS0022-3@5': 'using System;\nusing System.Linq;\n\npublic class Test\n{\n    static int[,] a = new int[10,10];\n    public static void Main()\n    {\n        for (int i = 0; i != 10; i++)\n        {\n            //a[i] = new int[20];\n            a[i, 0] = i + 100;\n        }\n        // some codes\n    }\n}', 'CS0127@1': 'public class ExampleScript : MonoBehaviour\n{\n    int MyMethod()\n    {\n    \tint x = 7;\n        return x;\n    }\n}\npublic class MonoBehaviour\n{\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n    }\n}', 'CS0127@4': 'using System;\nusing System.Collections;\nusing System.Windows.Forms;\nusing System.Drawing;\n\npublic class Program\n{\n    ArrayList lstNumbers;\n    private ArrayList QuestionAnswer_Load(object sender, EventArgs e)\n    {\n\n        txtQuestion.Enabled = false;\n        txtQuestion.BackColor = Color.White;\n        grpMultipleChoice.Enabled = false;\n        grpSingleChoice.Enabled = false;\n\n        btnCheckAnswer.Enabled = false;\n        btnNext.Enabled = false;\n        btnQuit.Enabled = false;\n\n        //force student to enter registration details\n        if (txtStudentName.Text == "" && txtStudentNumber.Text == "" && txtModuleNumber.Text == "")\n        {\n            btnStart.Enabled = false;\n            MessageBox.Show("You must enter your registration details at the upper right corner");\n        }\n\n        //declare a list\n        lstNumbers = new ArrayList();\n\n        //create a random number generator\n        Random rndNumber = new Random();\n\n        //generate 70 random numbers\n        //int number = (int)(rndNumber.NextDouble() * 69) + 1;\n\n        //lstNumbers.Add(number);\n        ///use this counter to loop whenever a number is generated\n        int count = 0;\n        int maximumNumber = 69;\n\n        ///disable answer button \n        btnCheckAnswer.Enabled = false;\n        do\n        {\n\n            int number = (int)(rndNumber.NextDouble() * maximumNumber) + 1;\n            lstNumbers.Add(number);\n            if (!lstNumbers.Contains(number))\n            {\n                lstNumbers.Add(number);\n            }\n            count++;\n\n        } while (count <= 15 * 70);//\n        btnCheckAnswer_Click(sender, e);\n        return lstNumbers;//returns once list is built\n    }\n\n    void btnCheckAnswer_Click(object sender, EventArgs e) {}\n\n    Button btnCheckAnswer, btnNext, btnQuit, btnStart, grpMultipleChoice, grpSingleChoice;\n\n    TextBox txtStudentName, txtQuestion, txtStudentNumber, txtModuleNumber;\n\n    static void Main() {}\n}', 'CS0127@3': 'using System.Collections;\nusing System.Collections.Generic;\n// using UnityEngine;\n\npublic class MethodeReturn //: MonoBehaviour\n{\n\n    // Ma methode\n    static float LongHypo(float a, float b)\n    {\n        float SommeCar = a * a + b * b;\n        return SommeCar;\n    }\n\n    // Use this for initialization\n    void Start()\n    {\n        float result = LongHypo(3, 4);\n        result++;\n\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n\n    }\n\n    static void Main()\n    {\n        \n    }\n}', 'CS0127@2': 'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Inventory_system_test\n{\n    class Program\n    {\n        //Objects\n        static private Inventory inv = new Inventory();\n\n        //strings\n        static private string args;\n        //variables\n\n\n\n        static void Main(string[] args)\n        {\n            Write("Do you want to kill dave?");\n            input();\n        }\n\n        static public string input()\n        {\n\n            bool done = false;\n\n            Writen("Enter a command: ");\n            args = Console.ReadLine();\n            while (!done)\n            {\n                if (args.Contains("add inv "))\n                {\n                    args = args.Split()[2];\n                    inv.additem(args);\n\n                }\n                else if (args.Contains("remove inv "))\n                {\n                    args = args.Split()[2];\n                    inv.removeitem(args);\n\n                }\n                else if (args.Contains("see inv"))\n                {\n                    Write("INVENTORY:");\n                    inv.getinv();\n                }\n                else if (args == "close")\n                {\n                    Environment.Exit(0);\n                }\n                else\n                {\n                    done = true;\n                    return args; ///**Here is the error ofcourse.**\n                }\n\n            }\n\n            return "";\n        } //Input files things :)\n\n\n        //#region Easy Commands (Write, Sleep)\n        //Write to console\n        public static void Write(string writev)\n        {\n            Console.WriteLine(writev);\n        }\n\n        //Sleep for \'int sleeptime\' in milliseconds\n        public static void Sleep(int sleeptime)\n        {\n            System.Threading.Thread.Sleep(sleeptime);\n        }\n\n        public static void Writen(string writen)\n        {\n            Console.Write(writen);\n        }\n        //#endregion\n    }\n\n    internal class Inventory\n    {\n        internal void additem(string args)\n        {\n            throw new NotImplementedException();\n        }\n\n        internal void getinv()\n        {\n            throw new NotImplementedException();\n        }\n\n        internal void removeitem(string args)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}', 'CS0127@5': 'using System;\n\npublic class SecondScript //: MonoBehaviour\n{\n    int number1 = 2;\n    int number2 = 3;\n    int number3 = 7;\n\n    int AddTwoNumbers(int firstNumber, int secondNumber)\n    {\n\n        int result = firstNumber + secondNumber;\n        return result;\n\n    }\n\n    void DisplayResult(int total)\n    {\n\n        Console.WriteLine("The grand total is: " + total);\n\n    }\n\n    static void Main() {}\n}', 'CS1624-1@1': 'using System;\nusing System.Collections;\n\npublic class ExampleScript : MoniBehaviour\n{\n    public GameObject timeMaster;\n\n    IEnumerator WaitCheck()\n    {\n        if(timeMaster.activeSelf)\n        {\n            yield return StartCorountine("Wait");\n        }\n    }\n\n    private object StartCorountine(string v)\n    {\n        throw new NotImplementedException();\n    }\n}\npublic class GameObject\n{\n    public bool activeSelf;\n}\npublic class MoniBehaviour\n{\n}\npublic class Program\n{\n    public static void Main()\n    {\n    }\n}\n', 'CS1624-1@4': '// CS1624.cs  \nusing System;  \nusing System.Collections;  \n  \nclass C  \n{  \n    IEnumerator Start () \n    {   \n        string dataUrl = "http://www.my-site.com/game/test.php";\n        string playName = "Player 1";\n        int score = -1;\n\n        // Create a form object for sending high score data to the server\n        var form = new WWWForm();\n        // Assuming the perl script manages high scores for different games\n        form.AddField( "game", "MyGameName" );\n        // The name of the player submitting the scores\n        form.AddField( "playerName", playName );\n        // The score\n        form.AddField( "score", score );\n\n        // Create a download object\n        WWW downloadW = new WWW( dataUrl, form );\n\n        // Wait until the download is done\n        yield return downloadW;\n\n\n        if(downloadW.error == null) {\n            Console.WriteLine( "Error downloading: " + downloadW.error );\n\n        } else {\n            // show the highscores\n            Console.WriteLine(downloadW.text);\n        }\n    }\n\n    public static void Main()\n    {\n\n    }\n}\n\nclass WWWForm\n{\n    public void AddField(string key, string value) {}\n    public void AddField(string key, int value) {}\n}\n\nclass WWW\n{\n    public WWW(string dataUrl, WWWForm form) {}\n\n    public string error = "";\n    public string text = "";\n}', 'CS1624-1@3': '// CS1624.cs  \nusing System;  \nusing System.Collections;  \n  \nclass C  \n{  \n    IEnumerator Start () \n    {   \n        string dataUrl = "http://www.my-site.com/game/test.php";\n        string playName = "Player 1";\n        int score = -1;\n\n        // Create a form object for sending high score data to the server\n        var form = new WWWForm();\n        // Assuming the perl script manages high scores for different games\n        form.AddField( "game", "MyGameName" );\n        // The name of the player submitting the scores\n        form.AddField( "playerName", playName );\n        // The score\n        form.AddField( "score", score );\n\n        // Create a download object\n        WWW downloadW = new WWW( dataUrl, form );\n\n        // Wait until the download is done\n        yield return downloadW;\n\n\n        if(downloadW.error == null) {\n            Console.WriteLine( "Error downloading: " + downloadW.error );\n\n        } else {\n            // show the highscores\n            Console.WriteLine(downloadW.text);\n        }\n    }\n\n    public static void Main()\n    {\n\n    }\n}\n\nclass WWWForm\n{\n    public void AddField(string key, string value) {}\n    public void AddField(string key, int value) {}\n}\n\nclass WWW\n{\n    public WWW(string dataUrl, WWWForm form) {}\n\n    public string error = "";\n    public string text = "";\n}', 'CS1624-1@2': 'using System;\nusing System.Collections;\n\nclass Program\n{\n    private bool quest1Started;\n\n    IEnumerator StartedQuest()\n    {\n        quest1Started = true;\n\n        yield return WaitForSeconds(3);\n        quest1Started = false;\n    }\n\n    private object WaitForSeconds(int v)\n    {\n        throw new NotImplementedException();\n    }\n\n    public static void Main()\n    {\n        \n    }\n}', 'CS1624-1@5': '// using UnityEngine;\nusing System.Collections;\n\npublic class ChangeScene //: MonoBehaviour\n{\n\n    public IEnumerator ChangeToScene(string sceneToChangeTo)\n    {\n        float fadeTime = 1.0F;\n        yield return new WaitForSeconds(fadeTime);\n        Application.LoadLevel(sceneToChangeTo);\n    }\n\n    public static void Main() {}\n}\n\nclass WaitForSeconds\n{\n    public WaitForSeconds(float time) {}\n}\n\nclass Application\n{\n    public static void LoadLevel(string level) {}\n}', 'CS1656@1': 'public class ExampleScript : MoniBehaviour\n{\n    void Start()\n    {\n        MyMethod(7);\n    }\n    void MyMethod(int number)\n    {\n\n    }\n}\npublic class MoniBehaviour\n{\n}\npublic class Program\n{\n    public static void Main()\n    {\n    }\n}\n', 'CS1656@4': '// using UnityEngine;\nusing System.Collections;\n\npublic class Coin //: MonoBehaviour\n{\n\n    void OnCollisionEnter2D(Collision2D col)\n    {\n\n        if (col.gameObject.tag == ("Player"))\n        {\n\n            Leaderboard.LDRBRD.Score(1000);\n\n            Destroy(gameObject);\n        }\n    }\n\n    void Destroy(GameObject o) {}\n\n    GameObject gameObject;\n}\n\nclass Collision2D\n{\n    public GameObject gameObject;\n}\n\nclass GameObject\n{\n    public string tag;\n}\n\nclass Leaderboard\n{\n    public static AScore LDRBRD;\n}\n\nclass AScore\n{\n    int score;\n\n    public int Score()\n    {\n        return score;\n    }\n    \n    public void Score(int points)\n    {\n        score = points;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n    }\n}\n', 'CS1656@3': 'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Circle_Area_and_Perimeter\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Write("Enter circle radius. r = ");\n            var r = double.Parse(Console.ReadLine());\n\n            Console.WriteLine("Area = " + Math.PI * r * r);\n        }\n    }\n}', 'CS1656@2': 'public partial class Form1 : Form\n{\n    string text = "";\n\n    public Form1()\n    {\n        InitializeComponent();\n    }\n\n    private void button1_Click(object sender)\n    {\n        string inches = textBox1.Text;\n        text = ConvertToFeet(inches) + ConvertToYards(inches);\n        textBox2.AppendText(text);\n    }\n\n    private string ConvertToFeet(string inches)\n    {\n        int feet = Convert.ToInt32(inches) / 12;\n        int leftoverInches = Convert.ToInt32(inches) % 12;\n        return (feet + " feet and " + leftoverInches + " inches." + " \\n");\n    }\n\n    private string ConvertToYards(string inches)\n    {\n        int yards = Convert.ToInt32(inches) / 36;\n        int feet = (Convert.ToInt32(inches) - yards * 36) / 12;\n        int leftoverInches = Convert.ToInt32(inches) % 12;\n        return (yards + " yards and " + feet + " feet, and " + leftoverInches + " inches.");\n    }\n\n    private TextBox textBox1, textBox2;\n}\n\npublic abstract class Form\n{\n    protected void InitializeComponent() {}\n}\n\nclass TextBox\n{\n    public string Text;\n\n    public void AppendText(string s) {}\n}\n\nclass Convert\n{\n    public static int ToInt32(string s)\n    {\n        return int.Parse(s);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n    }\n}\n', 'CS1656@5': 'public class Program\n{\n    public static void Main()\n    {\n        alert ("Get some rest");\n    }\n    public static void alert(string s)\n    {\n\n    }\n}', 'CS0117@1': 'public class PlayerPrefs\n{\n    public static void Save()\n    {\n    }\n}\nclass Program\n{\n    void Start()\n    {\n        PlayerPrefs.Save();\n    }\n    static void Main(string[] args)\n    {\n    }\n}', 'CS0117@4': 'using System;\n\npublic static class TemperatureConverter\n{\n    public static double CelsiusToFahrenheit(string temperatureCelsius)\n    {\n        // Convert argument to double for calculations.\n        double celsius = Double.Parse(temperatureCelsius);\n\n        // Convert Celsius to Fahrenheit.\n        double fahrenheit = (celsius * 9 / 5) + 32;\n\n        return fahrenheit;\n    }\n\n    // public static double FahrenheitToCelsius(string temperatureFahrenheit)\n    // {\n    //     // Convert argument to double for calculations.\n    //     double fahrenheit = Double.Parse(temperatureFahrenheit);\n\n    //     // Convert Fahrenheit to Celsius.\n    //     double celsius = (fahrenheit - 32) * 5 / 9;\n\n    //     return celsius;\n    // }\n}\n\nclass TestTemperatureConverter\n{\n    static void Main()\n    {\n        Console.WriteLine("Please select the convertor direction");\n        Console.WriteLine("1. From Celsius to Fahrenheit.");\n        Console.WriteLine("2. From Fahrenheit to Celsius.");\n        Console.Write(":");\n\n        string selection = Console.ReadLine();\n        double F, C = 0;\n\n        switch (selection)\n        {\n            case "1":\n                Console.Write("Please enter the Celsius temperature: ");\n                F = TemperatureConverter.CelsiusToFahrenheit(Console.ReadLine());\n                Console.WriteLine("Temperature in Fahrenheit: {0:F2}", F);\n                break;\n\n            case "2":\n                Console.Write("Please enter the Fahrenheit temperature: ");\n                // C = TemperatureConverter.FahrenheitToCelsius(Console.ReadLine());\n                Console.WriteLine("Temperature in Celsius: {0:F2}", C);\n                break;\n\n            default:\n                Console.WriteLine("Please select a convertor.");\n                break;\n        }\n\n        // Keep the console window open in debug mode.\n        Console.WriteLine("Press any key to exit.");\n        Console.ReadKey();\n    }\n}\n/* Example Output:\n    Please select the convertor direction\n    1. From Celsius to Fahrenheit.\n    2. From Fahrenheit to Celsius.\n    :2\n    Please enter the Fahrenheit temperature: 20\n    Temperature in Celsius: -6.67\n    Press any key to exit.\n */\n', 'CS0117@3': 'using System;\n\nstatic class Perls\n{\n    public static int _value = 5;\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(++Perls._value);\n    }\n}', 'CS0117@2': '// CS0117.cs  \npublic class BaseClass\n{\n    public int someMembers;\n}\n\npublic class base021 : BaseClass\n{\n    public void TestInt()\n    {\n        int i = base.someMembers; //CS0117  \n    }\n    public static int Main()\n    {\n        return 1;\n    }\n}', 'CS0117@5': 'using System;\n\npublic static class TemperatureConverter\n{\n    // public static double CelsiusToFahrenheit(string temperatureCelsius)\n    // {\n    //     // Convert argument to double for calculations.\n    //     double celsius = Double.Parse(temperatureCelsius);\n\n    //     // Convert Celsius to Fahrenheit.\n    //     double fahrenheit = (celsius * 9 / 5) + 32;\n\n    //     return fahrenheit;\n    // }\n\n    public static double FahrenheitToCelsius(string temperatureFahrenheit)\n    {\n        // Convert argument to double for calculations.\n        double fahrenheit = Double.Parse(temperatureFahrenheit);\n\n        // Convert Fahrenheit to Celsius.\n        double celsius = (fahrenheit - 32) * 5 / 9;\n\n        return celsius;\n    }\n}\n\nclass TestTemperatureConverter\n{\n    static void Main()\n    {\n        Console.WriteLine("Please select the convertor direction");\n        Console.WriteLine("1. From Celsius to Fahrenheit.");\n        Console.WriteLine("2. From Fahrenheit to Celsius.");\n        Console.Write(":");\n\n        string selection = Console.ReadLine();\n        double F = 0, C = 0;\n\n        switch (selection)\n        {\n            case "1":\n                Console.Write("Please enter the Celsius temperature: ");\n                // F = TemperatureConverter.CelsiusToFahrenheit(Console.ReadLine());\n                Console.WriteLine("Temperature in Fahrenheit: {0:F2}", F);\n                break;\n\n            case "2":\n                Console.Write("Please enter the Fahrenheit temperature: ");\n                C = TemperatureConverter.FahrenheitToCelsius(Console.ReadLine());\n                Console.WriteLine("Temperature in Celsius: {0:F2}", C);\n                break;\n\n            default:\n                Console.WriteLine("Please select a convertor.");\n                break;\n        }\n\n        // Keep the console window open in debug mode.\n        Console.WriteLine("Press any key to exit.");\n        Console.ReadKey();\n    }\n}\n/* Example Output:\n    Please select the convertor direction\n    1. From Celsius to Fahrenheit.\n    2. From Fahrenheit to Celsius.\n    :2\n    Please enter the Fahrenheit temperature: 20\n    Temperature in Celsius: -6.67\n    Press any key to exit.\n */\n', 'CS0022-2@1': 'public class MysScript:MonoBehaviour\n{\n    \n    void Start()\n    {\n        int[,] myArray = new int[10, 10];\n        Debug.Log(myArray[0, 0]);\n    }\n}\npublic class MonoBehaviour\n{\n}\ninternal class Debug\n{\n    internal static void Log(int v)\n    {\n    }\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n    }\n}', 'CS0022-2@4': 'using System;\npublic class UserMainCode\n{\n    //Assume following return types while writing the code for this question. \n    public static void soduko()\n    {\n    }\n    public static void SolveSudoku(int[,] input1)\n    {\n        int[,] output1 = new int[10,10];\n        input1 = new int[9, 9];\n        int i, j;\n        for (i = 0; i < 9; i++)\n            output1[i, 0] = input1[i, 0];\n        soduko();\n\n\n        //Write code here \n    }\n\n    public static void Main() {}\n}', 'CS0022-2@3': 'public class Test\n{\n    public static void Main()\n    {\n        int[,] a = new int[10,10];\n        a[0, 1] = 9;\n    }\n}', 'CS0022-2@2': '// CS0022.cs  \npublic class MyClass\n{\n    public static void Main()\n    {\n        int[,] a = new int[10,10];\n        // a[0] = 0;     // single-dimension array  \n        a[0, 1] = 9;   // CS0022, the array does not have two dimensions  \n    }\n}', 'CS0022-2@5': 'using System;\nusing System.Linq;\n\npublic class Test\n{\n    public static void Main()\n    {\n        int[,] a = new int[10,10];\n        // for (int i = 0; i != 10; i++)\n        // {\n        //     //a[i] = new int[20];\n        //     a[i, 0] = i + 100;\n        // }\n        a[0, 0] = 100;\n        // some codes\n    }\n}', 'CS0266@1': 'public class ExampleScript : MonoBeehaviour\n{\n    public double i = 1.5;\n    public float j;\n\n    void Start()\n    {\n        j = (float)i;\n    }\n}\npublic class MonoBeehaviour\n{\n}\npublic class Program\n{\n    public static void Main()\n    {\n    }\n}', 'CS0266@4': '// CS0266.cs  \nclass MyClass\n{\n    public static void Main()\n    {\n        // You cannot implicitly convert a double to an integer.  \n        // double d = 3.2;\n\n        // The following line causes compiler error CS0266.  \n        // int i1 = d;\n\n        // However, you can resolve the error by using an explicit conversion.  \n        // int i2 = (int)d;\n\n        // You cannot implicitly convert an object to a class type.  \n        // object obj = "MyString";\n\n        // The following assignment statement causes error CS0266.  \n        // MyClass myClass = obj;\n\n        // You can resolve the error by using an explicit conversion.  \n        // MyClass myClass = (MyClass)obj;\n\n        // You cannot implicitly convert a base class object to a derived class type.  \n        MyClass mc = new MyClass();\n        DerivedClass dc = new DerivedClass();\n\n        // The following line causes compiler error CS0266.  \n        dc = (DerivedClass)mc;\n\n        // You can resolve the error by using an explicit conversion.  \n        // dc = (DerivedClass)mc;\n    }\n}\n\nclass DerivedClass : MyClass\n{\n}', 'CS0266@3': '// CS0266.cs  \nclass MyClass\n{\n    public static void Main()\n    {\n        // You cannot implicitly convert a double to an integer.  \n        // double d = 3.2;\n\n        // The following line causes compiler error CS0266.  \n        // int i1 = d;\n\n        // However, you can resolve the error by using an explicit conversion.  \n        // int i2 = (int)d;\n\n        // You cannot implicitly convert an object to a class type.  \n        object obj = "MyString";\n\n        // The following assignment statement causes error CS0266.  \n        MyClass myClass = (MyClass)obj;\n\n        // You can resolve the error by using an explicit conversion.  \n        // MyClass myClass = (MyClass)obj;\n\n        // You cannot implicitly convert a base class object to a derived class type.  \n        // MyClass mc = new MyClass();\n        // DerivedClass dc = new DerivedClass();\n\n        // The following line causes compiler error CS0266.  \n        // dc = mc;\n\n        // You can resolve the error by using an explicit conversion.  \n        // dc = (DerivedClass)mc;\n    }\n}\n\nclass DerivedClass : MyClass\n{\n}', 'CS0266@2': '// CS0266.cs  \nclass MyClass\n{\n    public static void Main()\n    {\n        // You cannot implicitly convert a double to an integer.  \n        double d = 3.2;\n\n        // The following line causes compiler error CS0266.  \n        int i1 = (int)d;\n\n        // However, you can resolve the error by using an explicit conversion.  \n        // int i2 = (int)d;\n\n        // You cannot implicitly convert an object to a class type.  \n        // object obj = "MyString";\n\n        // The following assignment statement causes error CS0266.  \n        // MyClass myClass = obj;\n\n        // You can resolve the error by using an explicit conversion.  \n        // MyClass myClass = (MyClass)obj;\n\n        // You cannot implicitly convert a base class object to a derived class type.  \n        // MyClass mc = new MyClass();\n        // DerivedClass dc = new DerivedClass();\n\n        // The following line causes compiler error CS0266.  \n        // dc = mc;\n\n        // You can resolve the error by using an explicit conversion.  \n        // dc = (DerivedClass)mc;\n    }\n}\n\nclass DerivedClass : MyClass\n{\n}', 'CS0266@5': 'class Program\n{\n    public static long sqlDefaultTime;\n    public static void main()\n    {\n        int dd = 6000;\n        SqlCommand sqlCmdDefaultTime = new SqlCommand("myQuery", sqlCon);\n        sqlDefaultTime = sqlCmdDefaultTime.ExecuteReader();\n        while (sqlDefaultTime > 0)\n        {\n            dd = (int) sqlDefaultTime;\n        }\n    }\n\n    private static SqlConnection sqlCon;\n\n    public static void Main() {}\n}\n\nclass SqlConnection {}\n\nclass SqlCommand\n{\n    public SqlCommand(string cmd, SqlConnection conn)\n    {\n\n    }\n\n    public long ExecuteReader()\n    {\n        return 10;\n    }\n}', 'CS1503@1': 'public class MyScript : MoniBehaviour\n{\n    void MethodA()\n    {\n        int result = 5 + 3;\n        DisplayResult(result.ToString());\n    }\n\n    public void DisplayResult(string text)\n    {\n        Debug.Log(text);\n    }\n}\npublic class Debug\n{\n    public static void Log(string v)\n    {\n    }\n}\npublic class MoniBehaviour\n{\n}\npublic class Program\n{\n    public static void Main()\n    {\n    }\n}\n', 'CS1503@4': 'using System;\n\nclass Program\n{\n    public static void Main()\n    {\n        // Generic class\n        FixedSizeCollection<string> gC = new FixedSizeCollection<string>(5);\n        Console.WriteLine(gC);\n\n        string s1 = "s1";\n        string s2 = "s1";\n        string s3 = "s1";\n        int i1 = 1;\n\n        gC.AddItem(s1);\n        gC.AddItem(s2);\n        gC.AddItem(s3);\n\n        gC.AddItem(i1.ToString());\n    }\n}\n\npublic class FixedSizeCollection<T>\n{\n    public FixedSizeCollection(int size)\n    {\n\n    }\n\n    public void AddItem(T item)\n    {\n        \n    }\n}', 'CS1503@3': 'class Program\n{\n    static void Main()\n    {\n        // Some Code ..\n        if (listBoxProxies.SelectedIndex < - 1)\n        {\n            listBoxProxies.SelectedIndex = listBoxProxies.SelectedIndex + 1;\n            listBoxProxies.SetSelected(listBoxProxies.SelectedIndex, true);\n            RefreshIESettings(listBoxProxies.SelectedItem.ToString());\n        }\n        // Some Code ..\n    }\n\n    static Proxy listBoxProxies;\n\n    static void RefreshIESettings(string config)\n    {\n\n    }\n}\n\npublic class Proxy\n{\n    public int SelectedIndex;\n\n    public void SetSelected(int index, bool b)\n    {\n\n    }\n\n    public int SelectedItem = 2333;\n}', 'CS1503@2': 'using System;\n\nusing System.Collections.Generic;\n\nusing System.ComponentModel;\n\nusing System.Data;\n\nusing System.Drawing;\n\nusing System.Linq;\n\nusing System.Text;\n\nusing System.Windows.Forms;\n\n\n\nnamespace WindowsFormsApplication6\n\n{\n\n    public partial class Form1 : Form\n\n    {\n\n        public Form1()\n\n        {\n\n            InitializeLifetimeService();\n\n        }\n\n\n\n        private void button1_Click(object sender, EventArgs e)\n\n        {\n\n            DateTime today = DateTime.Today;\n\n            DateTime lastDayOfThisMonth = new DateTime(today.Year, today.Month, 1).AddMonths(1).AddDays(-1);\n\n            MessageBox.Show(lastDayOfThisMonth.ToString());\n\n\n\n        }\n\n    }\n    \n    public class Program\n    {\n        public static void Main()\n        {\n        }\n    }\n}', 'CS1503@5': 'using System;\nusing Examples;\n\nnamespace Examples\n{\n    public class Object1\n    {\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        object obj1 = new Object1();\n        func(obj1.ToString());\n    }\n    public static void func(string s)\n    {\n    }\n}\n// The example displays the following output:\n//   Examples.Object1', 'CS0161@1': 'public class GameObject\n{\n}\nclass Program\n{\n    GameObject obj_Zombie = new GameObject();\n    GameObject obj_Abomination = new GameObject();\n    GameObject SpawnEnemy(int input)\n    {\n        if (input == 0)\n        {\n            Debug.Log("Spawn Zombie");\n            return obj_Zombie;\n        }\n        else if (input == 1)\n        {\n            Debug.Log("Spawn Abomination");\n            return obj_Abomination;\n        }\n        // else\n        // {\n            Debug.Log("Spawn Nothing");\n            GameObject defaultValue = null;\n            return defaultValue;\n        // }\n    }\n    static void Main(string[] args)\n    {\n    }\n}\npublic class Debug\n{\n    public static void Log(string v)\n    {\n    }\n}', 'CS0161@4': 'using System.Collections.Generic;\nusing System;\n\npublic class TA\n{\n    public TA()\n    {\n    }\n\n    public static DataTable MergeTA()\n    {\n\n        DataTable defaultValue = new DataTable();\n        myDataTable.Columns.Add("AcadYear", typeof(string));\n        myDataTable.Columns.Add("NofGrp", typeof(System.Int16));\n        myDataTable.Columns.Add("LecHr", typeof(int));\n        /*\n        ...\n        ...\n        ...\n        */\n        DataRow myDR = defaultValue.NewRow();\n        myDataRow["AcadYear"] = "2009";\n        myDataRow["NoofGrp"] = "2";\n        myDataRow["LecHr"] = "1";\n        /*\n        ...\n        ...\n        ...\n        */\n        defaultValue.Rows.Add(myDR);\n        return defaultValue;\n\n    }\n\n    static DataTable myDataTable;\n    static DataRow myDataRow;\n\n    static void Main() {}\n}\n\npublic class DataTable\n{\n    public DataRow NewRow()\n    {\n        return new DataRow();\n    }\n\n    public List<DataRow> Rows;\n\n    public DataCols Columns;\n}\n\npublic class DataRow\n{\n    public string this[string key]\n    {\n        set\n        {\n\n        }\n    }\n}\n\npublic class DataCols\n{\n    public void Add(string key, Type type)\n    {\n\n    }\n}', 'CS0161@3': 'public class Program\n{\n    static void Main(string[] args)\n    {\n\n    }\n    public string ReturnItemName(int index)\n    {\n        \n        for (int i = 0; i < ItemList.Length; i++)\n        {\n\n            if (ItemList[i].Id == index)\n            {\n\n                return ItemList[i].Name;\n\n            }\n\n        }\n        string defaultValue = "";\n        return defaultValue;\n    }\n\n    public Item[] ItemList;\n}\n\n\npublic struct Item\n{\n    public int Id;\n    public string Name;\n}', 'CS0161@2': '// CS0161.cs  \npublic class Test\n{\n    public static int Main() // CS0161  \n    {\n        int defaultValue = 10;\n        if (defaultValue < 10)\n        {\n            return defaultValue;\n        }\n        // else\n        // {\n            // uncomment following lines to resolve\n            defaultValue = 1;\n            return defaultValue;  \n        // }\n    }\n}', 'CS0161@5': 'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    private Dictionary<string, int> ExtractNodeInfo(string fileContent)\n    {\n        XmlDocument xmlDocument;\n        xmlDocument = new XmlDocument();\n        xmlDocument.Load(fileContent);\n        var ediNodes = xmlDocument.DocumentElement.SelectNodes("/EDI");\n        Dictionary<string, int> defaultValue = new Dictionary<string, int>();\n        foreach (XmlNode nodes in ediNodes)\n        {\n            FileManager.nodeRecurse(nodes, defaultValue);\n        }\n\n        foreach (var entry in defaultValue)\n        {\n            Console.WriteLine(entry.ToString());\n        }\n        return defaultValue;\n    }\n\n    static void Main() {}\n}\n\npublic class XmlDocument\n{\n    public void Load(string content) {}\n\n    public Element DocumentElement;\n}\n\npublic class Element\n{\n    public IEnumerable<XmlNode> SelectNodes(string path)\n    {\n        yield return new XmlNode();\n    }\n}\n\npublic class XmlNode\n{\n\n}\n\npublic class FileManager\n{\n    public static void nodeRecurse(XmlNode node, Dictionary<string, int> defaultV)\n    {\n\n    }\n}', 'CS1041@1': 'public class MyScript : MoniBehaviour\n{\n    void Start()\n    {\n        Method(2);\n    }\n\n    public void Method(int eyeAmount)\n    {\n        Debug.Log("I have " + eyeAmount + "eyes");\n    }\n}\npublic class Debug\n{\n    public static void Log(string v)\n    {\n    }\n}\npublic class MoniBehaviour\n{\n}\npublic class Program\n{\n    public static void Main()\n    { \n    }\n}\n', 'CS1041@4': 'class SimpleMath\n{\n    public int AddTwoNumbers(int number1, int number2)\n    {\n        return number1 + number2;\n    }\n\n    public int SquareANumber(int number)\n    {\n        return number * number;\n    }\n    public int fun(int x)\n    {\n        return SquareANumber(x);\n    }\n\n    public static void Main() {}\n\n}', 'CS1041@3': 'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main()\n        {\n        }\n\n        public bool RecursiveCopy()\n        {\n            string origDir = @"D:\\Documents and Settings\\Dub\\My Documents\\HoN Updates\\test";\n            string destDir = @"C:\\Games\\HoN";\n            bool status = false;\n            //get all the info about the original directory\n            DirectoryInfo dirInfo = new DirectoryInfo(origDir);\n            //retrieve all the _fileNames in the original directory\n            FileInfo[] files = dirInfo.GetFiles(origDir);\n            //always use a try...catch to deal \n            //with any exceptions that may occur\n            try\n            {\n                //loop through all the file names and copy them\n                foreach (string file in Directory.GetFiles(origDir))\n                {\n                    FileInfo origFile = new FileInfo(file);\n                    FileInfo destFile = new FileInfo(file.Replace(origDir, destDir));\n                    //copy the file, use the OverWrite overload to overwrite\n                    //destination file if it exists\n                    System.IO.File.Copy(origFile.FullName, destFile.FullName, true);\n                    //TODO: If you dont want to remove the original\n                    //_fileNames comment this line out\n                    File.Delete(origFile.FullName);\n                    status = true;\n                }\n                Console.WriteLine("All files in " + origDir + " copied successfully!");\n            }\n            catch (Exception ex)\n            {\n                status = false;\n                //handle any errors that may have occurred\n                Console.WriteLine(ex.Message);\n            }\n            return status;\n        }\n\n        public string origDir = @"D:\\Documents and Settings\\Dub\\My Documents\\HoN Updates\\test"; // ERROR HERE\n        public string destDir = @"C:\\Games\\HoN"; // ERROR HERE\n\n        static void RecursiveCopy(int origDir)\n        {\n            Console.WriteLine("done");\n            Console.ReadLine();\n        }\n    }\n}', 'CS1041@2': 'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main()\n        {\n        }\n\n        public bool RecursiveCopy()\n        {\n            string origDir = @"D:\\Documents and Settings\\Dub\\My Documents\\HoN Updates\\test";\n            string destDir = @"C:\\Games\\HoN";\n            bool status = false;\n            //get all the info about the original directory\n            DirectoryInfo dirInfo = new DirectoryInfo(origDir);\n            //retrieve all the _fileNames in the original directory\n            FileInfo[] files = dirInfo.GetFiles(origDir);\n            //always use a try...catch to deal \n            //with any exceptions that may occur\n            try\n            {\n                //loop through all the file names and copy them\n                foreach (string file in Directory.GetFiles(origDir))\n                {\n                    FileInfo origFile = new FileInfo(file);\n                    FileInfo destFile = new FileInfo(file.Replace(origDir, destDir));\n                    //copy the file, use the OverWrite overload to overwrite\n                    //destination file if it exists\n                    System.IO.File.Copy(origFile.FullName, destFile.FullName, true);\n                    //TODO: If you dont want to remove the original\n                    //_fileNames comment this line out\n                    File.Delete(origFile.FullName);\n                    status = true;\n                }\n                Console.WriteLine("All files in " + origDir + " copied successfully!");\n            }\n            catch (Exception ex)\n            {\n                status = false;\n                //handle any errors that may have occurred\n                Console.WriteLine(ex.Message);\n            }\n            return status;\n        }\n\n        public string origDir = @"D:\\Documents and Settings\\Dub\\My Documents\\HoN Updates\\test"; // ERROR HERE\n        public string destDir = @"C:\\Games\\HoN"; // ERROR HERE\n\n        static void RecursiveCopy(int destDir)\n        {\n            Console.WriteLine("done");\n            Console.ReadLine();\n        }\n    }\n}', 'CS1041@5': 'class SimpleMath\n{\n    public int AddTwoNumbers(int number1, int number2)\n    {\n        return number1 + number2;\n    }\n\n    public int SquareANumber(int number)\n    {\n        return number * number;\n    }\n    public int fun(int x)\n    {\n        return SquareANumber(x);\n    }\n\n    public static void Main() {}\n\n}', 'CS1002@1': 'using System;\n\nnamespace Treehouse.CodeChallenges\n{\n    class Program\n    {\n        static void Main()\n        {\n            while (true)  //loop started\n            {\n                Console.Write("Enter the number of times to print \\"Yay!\\": ");\n                string entry = Console.ReadLine();\n\n                if (entry.ToLower() == "quit")\n                {\n                    break;\n                }\n                else\n                {\n                    int time = int.Parse(entry);  //turn "string" into "int"\n                    int k;\n                    for (k = 0; k < time;)  //make the loop run k times\n                    {\n                        Console.Write("Yay!");\n                        k = k + 1;\n                        continue;\n                    }\n                }\n\n                break;  //leave the "while loop" since "for" is not satisfied\n            }\n        }\n    }\n}', 'CS1002@4': '// A Hello World! program in C#.\nusing System;\nnamespace HelloWorld\n{\n    class Hello\n    {\n        static void Main()\n        {\n            Console.WriteLine("Hello World!");\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine("Press any key to exit.");\n            Console.ReadKey();\n        }\n    }\n}', 'CS1002@3': '// A Hello World! program in C#.\nusing System;\nnamespace HelloWorld\n{\n    class Hello\n    {\n        static void Main()\n        {\n            Console.WriteLine("Hello World!");\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine("Press any key to exit.");\n            Console.ReadKey();\n        }\n    }\n}', 'CS1002@2': '// A Hello World! program in C#.\nusing System;\nnamespace HelloWorld\n{\n    class Hello\n    {\n        static void Main()\n        {\n            Console.WriteLine("Hello World!");\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine("Press any key to exit.");\n            Console.ReadKey();\n        }\n    }\n}', 'CS1002@5': '// compile with: -target:library\npublic class D\n{\n    public virtual void DoWork(int i)\n    {\n        // Original implementation.\n        int x = i;\n    }\n}\n\npublic abstract class E : D\n{\n    public abstract override void DoWork(int i);\n}\n\npublic class F : E\n{\n    public override void DoWork(int i)\n    {\n        // New implementation.\n    }\n\n    public static void Main() {}\n}', 'CS1003@1': 'public class Program\n{\n    public static void Main()\n    {\n        bool a = true;\n        bool b = false;\n        if (a == true && b == false)\n        {\n\n        }\n    }\n}\n', 'CS1003@4': 'using System;\n\nnamespace Loops\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            /* local variable definition */\n            int a = 10;\n\n            /* do loop execution */\n            do\n            {\n                Console.WriteLine("value of a: {0}", a);\n                a = a + 1;\n            }\n            while (a < 20);\n            Console.ReadLine();\n        }\n    }\n}', 'CS1003@3': 'using System;\n\nnamespace Loops\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            /* local variable definition */\n            int a = 10;\n\n            /* while loop execution */\n            while (a < 20)\n            {\n                Console.WriteLine("value of a: {0}", a);\n                a++;\n            }\n            Console.ReadLine();\n        }\n    }\n}', 'CS1003@2': 'using System;\n\nnamespace Loops\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            for (;;)\n            {\n                Console.WriteLine("Hey! I am Trapped");\n            }\n        }\n    }\n}', 'CS1003@5': 'using System;\n\nnamespace DecisionMaking\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            /* local variable definition */\n            int a = 100;\n\n            /* check the boolean condition */\n            if (a < 20)\n            {\n                /* if condition is true then print the following */\n                Console.WriteLine("a is less than 20");\n            }\n            else\n            {\n                /* if condition is false then print the following */\n                Console.WriteLine("a is not less than 20");\n            }\n            Console.WriteLine("value of a is : {0}", a);\n            Console.ReadLine();\n        }\n    }\n}', 'CS0122@1': 'public class PrivateMethodScripts : MonoBehaviour\n{\n    public bool dragonsSpawned;\n\n    public void SpawnDragons()\n    {\n        Debug.Log("Spawn the Dragons");\n        dragonsSpawned = false;\n    }\n}\npublic class ExampleScipt : MonoBehaviour\n{\n    public PrivateMethodScripts privateMethodScripts;\n\n    void Start()\n    {\n        if(privateMethodScripts.dragonsSpawned == true)\n        {\n            privateMethodScripts.SpawnDragons();\n        }\n    }\n}\npublic class Debug\n{\n    public static void Log(string v)\n    {\n    }\n}\npublic class MonoBehaviour\n{\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n    }\n}', 'CS0122@4': 'namespace A\n{\n    class Program\n    {\n        static void Main()\n        {\n            Test test = new Test(1);\n        }\n    }\n    class Test\n    {\n        public Test(int i) { }\n    }\n}', 'CS0122@3': '// CS0122.cs  \npublic class MyClass\n{\n    // Make public to resolve CS0122  \n    public void MyMethod()\n    {\n    }\n}\n\npublic class MyClass2\n{\n    public static int Main()\n    {\n        MyClass a = new MyClass();\n        // MyMethod is private  \n        a.MyMethod();   // CS0122  \n        return 0;\n    }\n}', 'CS0122@2': 'public class PrivateMethodScripts : MonoBehaviour\n{\n    public bool dragonsSpawned;\n\n    public void SpawnDragons()\n    {\n        Debug.Log("Spawn the Dragons");\n        dragonsSpawned = false;\n    }\n}\npublic class ExampleScipt : MonoBehaviour\n{\n    public PrivateMethodScripts privateMethodScripts;\n\n    void Start()\n    {\n        if(privateMethodScripts.dragonsSpawned == true)\n        {\n            privateMethodScripts.SpawnDragons();\n        }\n    }\n}\npublic class Debug\n{\n    public static void Log(string v)\n    {\n    }\n}\npublic class MonoBehaviour\n{\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n    }\n}', 'CS0122@5': 'using System;\n\nclass Square\n{\n    public Square(double side)\n    {\n        Side = side;\n    }\n\n    public double Side { get; }\n}\n\nclass AreaCalculator\n{\n    public double Calculate(Square square) => square.Side * square.Side;\n}\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var square = new Square(4); // internal type\n        var calculator = new AreaCalculator(); // internal type\n        var area = calculator.Calculate(square); // private method\n        Console.WriteLine($"Square with a side of 4 has an area of {area}");\n    }\n}', 'CS0022-1@1': 'public class MysScript:MonoBehaviour\n{\n    public int[] myArray = new int[10];\n\n    void Start()\n    {\n        Debug.Log(myArray[0]);\n    }\n}\npublic class MonoBehaviour\n{\n}\ninternal class Debug\n{\n    internal static void Log(int v)\n    {\n    }\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n    }\n}', 'CS0022-1@4': 'using System;\npublic class UserMainCode\n{\n    //Assume following return types while writing the code for this question. \n    public static int[] output1 = new int[10];\n    public static void soduko()\n    {\n    }\n    public static void SolveSudoku(int[,] input1)\n    {\n        input1 = new int[9, 9];\n        int i, j;\n        for (i = 0; i < 9; i++)\n            output1[i] = input1[i, 0];\n        soduko();\n\n\n        //Write code here \n    }\n\n    public static void Main() {}\n}', 'CS0022-1@3': 'public class Test\n{\n    public static void Main()\n    {\n        int[] a = new int[10];\n        a[0] = 9;\n    }\n}', 'CS0022-1@2': '// CS0022.cs  \npublic class MyClass\n{\n    public static void Main()\n    {\n        int[] a = new int[10];\n        a[0] = 0;     // single-dimension array  \n        a[0] = 9;   // CS0022, the array does not have two dimensions  \n    }\n}', 'CS0022-1@5': 'using System;\nusing System.Linq;\n\npublic class Test\n{\n    public static void Main()\n    {\n        int[] a = new int[10];\n        for (int i = 0; i != 10; i++)\n        {\n            //a[i] = new int[20];\n            a[i] = i + 100;\n        }\n        // some codes\n    }\n}', 'CS0432@1': 'public class MyScript : MoniBehaviour\n{\n    void Start()\n    {\n        Debug.Log("Hello World");\n    }\n}\npublic class Debug\n{\n    public static void Log(string v)\n    {\n    }\n}\npublic class MoniBehaviour\n{\n}\npublic class Program\n{\n    public static void Main()\n    { \n    }\n}\n', 'CS0432@4': '\npublic class Automobile\n{\n    public static int NumberOfWheels = 4;\n    public static int SizeOfGasTank\n    {\n        get\n        {\n            return 15;\n        }\n    }\n    public static void Drive() { }\n \n\n    // Other non-static fields and properties...\n\n    public static void Main() {}\n}\n\npublic class cla\n{\n    void func()\n    {\n        Automobile.Drive();\n    }\n}', 'CS0432@3': 'using System;\n\nclass Sample\n{\n    static void Main()\n    {\n\n        Console.WriteLine("Hello"); // OK\n\n\n    }\n}', 'CS0432@2': '// CS0432.cs  \n\npublic class B\n{\n    public static void Meth() { }\n}\n\n\npublic class Test\n{\n    public static void Main()\n    {\n        B.Meth();   // CS0432  \n                       // To resolve, use the following line instead:  \n                       // B.Meth();  \n    }\n}', 'CS0432@5': 'using System;\n\npublic class Program\n{\n    void func()\n    {\n        double dub = -3.14;\n        Console.WriteLine(Math.Abs(dub));\n    }\n\n    public static void Main() {}\n}', 'CS1513@1': 'using System;\npublic class Test\n{\n    public static void Main()\n    {\n        string reply;\n        Console.WriteLine("Hi");\n        reply = Console.ReadLine().ToUpper();\n        if (reply == "BYE")\n        { Console.WriteLine("bye"); }\n    }\n}', 'CS1513@4': '// A Hello World! program in C#.\nusing System;\nnamespace HelloWorld\n{\n    class Hello\n    {\n        static void Main()\n        {\n            Console.WriteLine("Hello World!");\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine("Press any key to exit.");\n            Console.ReadKey();\n        }\n    }\n}', 'CS1513@3': 'using System;\n\nnamespace DecisionMaking\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            /* local variable definition */\n            int a = 100;\n\n            /* check the boolean condition */\n            if (a == 10)\n            {\n                /* if condition is true then print the following */\n                Console.WriteLine("Value of a is 10");\n            }\n            else if (a == 20)\n            {\n                /* if else if condition is true */\n                Console.WriteLine("Value of a is 20");\n            }\n            else if (a == 30)\n            {\n                /* if else if condition is true  */\n                Console.WriteLine("Value of a is 30");\n            }\n            else\n            {\n                /* if none of the conditions is true */\n                Console.WriteLine("None of the values is matching");\n            }\n            Console.WriteLine("Exact value of a is: {0}", a);\n            Console.ReadLine();\n        }\n    }\n}', 'CS1513@2': 'using System;\n\nnamespace DecisionMaking\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            /* local variable definition */\n            int a = 100;\n\n            /* check the boolean condition */\n            if (a == 10)\n            {\n                /* if condition is true then print the following */\n                Console.WriteLine("Value of a is 10");\n            }\n            else if (a == 20)\n            {\n                /* if else if condition is true */\n                Console.WriteLine("Value of a is 20");\n            }\n            else if (a == 30)\n            {\n                /* if else if condition is true  */\n                Console.WriteLine("Value of a is 30");\n            }\n            else\n            {\n                /* if none of the conditions is true */\n                Console.WriteLine("None of the values is matching");\n            }\n            Console.WriteLine("Exact value of a is: {0}", a);\n            Console.ReadLine();\n        }\n    }\n}', 'CS1513@5': '// compile with: -target:library\npublic class D\n{\n    public virtual void DoWork(int i)\n    {\n        // Original implementation.\n    }\n}\n\npublic abstract class E : D\n{\n    public abstract override void DoWork(int i);\n}\n\npublic class F : E\n{\n    public override void DoWork(int i)\n    {\n        // New implementation.\n    }\n\n    public static void Main() {}\n}', 'CS0428@1': 'using System;\npublic class Program\n{\n    void OnTriggerEnter(Collider coll)\n    {\n        if(coll.tag == "Enemy")\n        {\n            EnemyScript enemyTransform = coll.gameObject.GetComponent<EnemyScript>();\n        }\n    }\n    public static void Main()\n    {\n    }\n}\ninternal class EnemyScript\n{\n}\npublic class GameObject\n{\n    internal T GetComponent<T>()\n    {\n        throw new NotImplementedException();\n    }\n}\ninternal class Collider\n{\n    internal string tag = null;\n    internal GameObject gameObject = null;\n}', 'CS0428@4': 'class Program\n{\n    static void Main()\n    {\n        object[] Close = new object[10];\n        // Resolution Sample Code - ToString() is properly called\n\n        string str = Close[5].ToString();\n\n    }\n}\n', 'CS0428@3': '// CS0428.cs  \nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        delegate int Del1();\n        delegate object Del2();\n\n        static void Main(string[] args)\n        {\n            ExampleClass ec = new ExampleClass();\n\n            // The following assignment statement causes compiler error CS0428.  \n            // It attempts to assign the address of Method1 to an integer variable.   \n            // You can only assign the address to an appropriate delegate type.   \n            // int i = ec.Method1();\n\n            // Del1 is a delegate type that is appropriate for a method like   \n            // Method1 that returns an int. The following assignment statement  \n            // does not cause an error.  \n            // Del1 d1 = ec.Method1;\n\n            // You can invoke Method1 and assign the int that is returned to   \n            // integer variable i.  \n            // i = ec.Method1();\n\n            // The following assignment statement causes compiler error CS0428.  \n            // It attempts to assign the address of Method2 to an instance of   \n            // ExampleClass. You can only assign the address to a delegate type.   \n            ec = ExampleClass.Method2();\n\n            // Del2 is a delegate type that is appropriate for a method like   \n            // Method2 that returns an instance of a class. The following assignment  \n            // statement does not cause an error.  \n            // Del2 d2 = ExampleClass.Method2;\n\n            // Similarly, you can invoke Method2 and assign the result returned to ec.  \n            // ec = ExampleClass.Method2();\n        }\n    }\n\n    public class ExampleClass\n    {\n        public int Method1() { return 1; }\n        public static ExampleClass Method2() { return null; }\n    }\n}', 'CS0428@2': '// CS0428.cs  \nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        delegate int Del1();\n        delegate object Del2();\n\n        static void Main(string[] args)\n        {\n            ExampleClass ec = new ExampleClass();\n\n            // The following assignment statement causes compiler error CS0428.  \n            // It attempts to assign the address of Method1 to an integer variable.   \n            // You can only assign the address to an appropriate delegate type.   \n            int i = ec.Method1();\n\n            // Del1 is a delegate type that is appropriate for a method like   \n            // Method1 that returns an int. The following assignment statement  \n            // does not cause an error.  \n            // Del1 d1 = ec.Method1;\n\n            // You can invoke Method1 and assign the int that is returned to   \n            // integer variable i.  \n            // i = ec.Method1();\n\n            // The following assignment statement causes compiler error CS0428.  \n            // It attempts to assign the address of Method2 to an instance of   \n            // ExampleClass. You can only assign the address to a delegate type.   \n            // ec = ExampleClass.Method2;\n\n            // Del2 is a delegate type that is appropriate for a method like   \n            // Method2 that returns an instance of a class. The following assignment  \n            // statement does not cause an error.  \n            // Del2 d2 = ExampleClass.Method2;\n\n            // Similarly, you can invoke Method2 and assign the result returned to ec.  \n            // ec = ExampleClass.Method2();\n        }\n    }\n\n    public class ExampleClass\n    {\n        public int Method1() { return 1; }\n        public static ExampleClass Method2() { return null; }\n    }\n}', 'CS0428@5': 'using System;\n\nclass Program\n{\n    static void Main()\n    {\n        try\n        {\n\n        }\n        catch(Exception ex) {\n            string MyException = ex.ToString();\n            Console.WriteLine(MyException);\n        }\n\n\n    }\n}\n', 'CS8070@1': 'class Program\n{\n    static void Main(string[] args)\n    {\n        string destination = "default";\n        switch (destination)\n        {\n            case "Inventory":\n                AddToInventory();\n                break;\n            case "Hotbar":\n                AddToHotbar();\n                break;\n            default:\n                Debug.Log("Destination Unknown");\n                break;\n        }\n    }\n    static void AddToInventory()\n    {\n    }\n    static void AddToHotbar()\n    {\n    }\n}\n\nclass Debug\n{\n    public static void Log(string v)\n    {\n    }\n}', 'CS8070@4': 'class Program\n{\n    public void func(string searchType)\n    {\n        switch (searchType)\n        {\n            case "SearchBooks":\n                Selenium.Type("//*[@id=\'SearchBooks_TextInput\']", searchText);\n                Selenium.Click("//*[@id=\'SearchBooks_SearchBtn\']");\n                break;\n            case "SearchAuthors":\n                Selenium.Type("//*[@id=\'SearchAuthors_TextInput\']", searchText);\n                Selenium.Click("//*[@id=\'SearchAuthors_SearchBtn\']");\n                break;\n        }\n    }\n\n    string searchText = "???";\n\n    static void Main() {}\n}\n\npublic class Selenium\n{\n    public static void Type(string path, string search)\n    {\n\n    }\n\n    public static void Click(string path)\n    {\n\n    }\n}', 'CS8070@3': '// CS0163.cs  \nusing System;\n\npublic class MyClass\n{\n    public static void Main()\n    {\n        int i = 0;\n        string Player1 = "", Player2 = "";\n        switch (Player1)\n        {\n            case "Rock":\n                switch (Player2)\n                {\n                    case "Rock":\n                        Console.WriteLine("Draw");\n                        break;\n                    case "Scissors":\n                        Console.WriteLine("Win Player1");\n                        break;\n                    case "Paper":\n                        Console.WriteLine("Win Player2");\n                        break;\n                }\n                switch (Player1)\n                {\n                    case "Scissors":\n                        switch (Player2)\n                        {\n                            case "Rock":\n                                Console.WriteLine("Win Player2");\n                                break;\n                            case "Scissors":\n                                Console.WriteLine("Draw");\n                                break;\n                            case "Paper":\n                                Console.WriteLine("Win Player1");\n                                break;\n                        }\n                        switch (Player1)\n                        {\n                            case "Paper":\n                                switch (Player2)\n                                {\n                                    case "Rock":\n                                        Console.WriteLine("Win Player1");\n                                        break;\n                                    case "Scissors":\n                                        Console.WriteLine("Win Player2");\n                                        break;\n                                    case "Paper":\n                                        Console.WriteLine("Draw");\n                                        break;\n                                }\n                                break;  //<---\n                        }\n                        break; //<---\n                }\n                break;  //<---   \n        }\n    }\n} ', 'CS8070@2': '// CS0163.cs  \nusing System;\n\npublic class MyClass\n{\n    public static void Main()\n    {\n        int i = 0;\n\n        switch (i)   // CS0163  \n        {\n            // Compiler error CS0163 is reported on the following line.  \n            case 1:\n                i++;\n                // To resolve the error, uncomment one of the following example statements.  \n                // return;  \n                // break;  \n                // goto case 3;  \n                break;\n            case 2:\n                i++;\n                return;\n\n            case 3:\n                i = 0;\n                return;\n\n            // Compiler error CS0163 is reported on the following line.  \n            default:\n                Console.WriteLine("Default");\n                // To resolve the error, uncomment the following line:  \n                //break;\n                break;  \n        }\n    }\n} ', 'CS8070@5': 'using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine("Enter a number between 1 and 10");\n        int num;\n        bool validity = int.TryParse(Console.ReadLine(), out num);\n        if (validity == true)\n        {\n            switch (num)\n            {\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n\n                    Console.WriteLine("You have entered {0}", num);\n                    break;\n                default:\n                    Console.WriteLine("You have not entered a number between 1 and 10");\n                    break;\n                    //break; This part is commented\n            }\n        }\n        else\n        {\n            Console.WriteLine("Please make a valid input");\n        }\n    }\n}', 'CS0165@1': 'class Program\n{\n    static void Main(string[] args)\n    {\n    }\n    // Use this for initialization\n    void Start()\n    {\n        List<GameObject> tempList = new List<GameObject>();\n\n        tempList.Add(new GameObject());\n\n    }\n}\npublic class GameObject\n{\n}\npublic class List<T>\n{\n    public void Add(GameObject gameObject)\n    {\n    }\n}', 'CS0165@4': 'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace testscores\n{\n    class Program\n    {\n        static string name = "Dude";\n        static void Main(string[] args)\n        {\n            int tmpCnt = new int();\n            if (name == "Dude")\n                tmpCnt++;\n        }\n    }\n}', 'CS0165@3': "using System;\n\npublic struct Vector2\n{\n    public event EventHandler trigger;\n\n    public float X;\n    public float Y;\n\n    public Vector2 func()\n    {\n        Vector2 vector = new Vector2();\n        vector.X = 1;\n        vector.Y = 2;\n        return vector;  // error CS0165: Use of unassigned local variable 'vector'\n    }\n\n    public static void Main() {}\n}", 'CS0165@2': 'using System.Collections.Generic;\n\nclass Program\n{\n    public static void Main()\n    {\n        List<TaggedEdge<int, float>> enumerable = new List<TaggedEdge<int, float>>();\n\n        if (IsSingle(enumerable))\n        {\n        }\n    }\n\n    static bool IsSingle<T>(List<T> list)\n    {\n        return true;\n    }\n}\n\n\npublic class TaggedEdge<A, B>\n{\n\n}', 'CS0165@5': '// using UnityEngine;\n\npublic class NewPPrefs : MonoBehaviour\n{\n\n    //############################################# HasKey #############################################\n\n    //A has key method for NewPPrefs\n    public static bool HasKey(string key)\n    {\n        string[] types = { "{0}", "NewPPrefs:bool:{0}", "NewPPrefs:Colour:{0}-r", "NewPPrefs:Colour32:{0}-r", "NewPPrefs:Vector2:{0}-x", "NewPPrefs:Vector3:{0}-x", "NewPPrefs:Vector4:{0}-x", "NewPPrefs:Vector3:Quaternion:{0}-x", "NewPPrefs:Vector4:Rect:{0}-x" };\n        bool flag = false;\n        foreach (string type in types)\n        {\n            if (PlayerPrefs.HasKey(string.Format(type, key)))\n                flag = true;\n        }\n        return flag;\n    }\n\n    //############################################### int ##############################################\n\n    //Ints stored normally just to make things nice and similar in user projects\n    public static void SetInt(string key, int value)\n    {\n        PlayerPrefs.SetInt(key, value);\n    }\n\n    public static int GetInt(string key)\n    {\n        return PlayerPrefs.GetInt(key);\n    }\n\n    public static int GetInt(string key, int defaultValue)\n    {\n        return PlayerPrefs.GetInt(key, defaultValue);\n    }\n\n    //############################################### float ##############################################\n\n    //Floats also stored normally just to make things nice and similar in user projects\n    public static void SetFloat(string key, float value)\n    {\n        PlayerPrefs.SetFloat(key, value);\n    }\n\n    public static float GetFloat(string key)\n    {\n        return PlayerPrefs.GetFloat(key);\n    }\n\n    public static float GetFloat(string key, float defaultValue)\n    {\n        return PlayerPrefs.GetFloat(key, defaultValue);\n    }\n\n    //############################################### String ##############################################\n\n    //And strings\n    public static void SetString(string key, string value)\n    {\n        PlayerPrefs.SetString(key, value);\n    }\n\n    public static string GetString(string key)\n    {\n        return PlayerPrefs.GetString(key);\n    }\n\n    public static string GetString(string key, string defaultValue)\n    {\n        return PlayerPrefs.GetString(key, defaultValue);\n    }\n\n    //############################################## bool ##############################################\n\n    //Store bool as 0 or 1\n    public static void SetBool(string key, bool value)\n    {\n        if (value)\n            PlayerPrefs.SetInt("NewPPrefs:bool:" + key, 1);\n        else\n            PlayerPrefs.SetInt("NewPPrefs:bool:" + key, 0);\n    }\n\n    public static bool GetBool(string key)\n    {\n        return GetBool(key, false);\n    }\n\n    public static bool GetBool(string key, bool defaultValue)\n    {\n        int value = PlayerPrefs.GetInt("NewPPrefs:bool:" + key, 2);\n        if (value == 2)        //Return default\n            return defaultValue;\n        else if (value == 1)    //Return true\n            return true;\n        else                    //Return false\n            return false;\n    }\n\n    //############################################## Color ##############################################\n\n    //Store Color data as RGBA floats\n    public static void SetColour(string key, Color value)\n    {\n        PlayerPrefs.SetFloat("NewPPrefs:Colour:" + key + "-r", value.r);\n        PlayerPrefs.SetFloat("NewPPrefs:Colour:" + key + "-g", value.g);\n        PlayerPrefs.SetFloat("NewPPrefs:Colour:" + key + "-b", value.b);\n        PlayerPrefs.SetFloat("NewPPrefs:Colour:" + key + "-a", value.a);\n    }\n\n    //Rebuild Color data from RGBA floats\n    public static Color GetColour(string key)\n    {\n        return GetColour(key, Color.clear);\n    }\n\n    public static Color GetColour(string key, Color defaultValue)\n    {\n        Color returnValue = new Color();\n        returnValue.r = PlayerPrefs.GetFloat("NewPPrefs:Colour:" + key + "-r", defaultValue.r);\n        returnValue.g = PlayerPrefs.GetFloat("NewPPrefs:Colour:" + key + "-g", defaultValue.g);\n        returnValue.b = PlayerPrefs.GetFloat("NewPPrefs:Colour:" + key + "-b", defaultValue.b);\n        returnValue.a = PlayerPrefs.GetFloat("NewPPrefs:Colour:" + key + "-a", defaultValue.a);\n        return returnValue;\n    }\n\n    //############################################ Color 32 #############################################\n\n    //Store Color32 data RGBA Ints\n    public static void SetColour32(string key, Color32 value)\n    {\n        PlayerPrefs.SetInt("NewPPrefs:Colour32:" + key + "-r", value.r);\n        PlayerPrefs.SetInt("NewPPrefs:Colour32:" + key + "-g", value.g);\n        PlayerPrefs.SetInt("NewPPrefs:Colour32:" + key + "-b", value.b);\n        PlayerPrefs.SetInt("NewPPrefs:Colour32:" + key + "-a", value.a);\n    }\n\n    //Rebuild Color32 data from RGBA Ints\n    public static Color32 GetColour32(string key)\n    {\n        return GetColour32(key, new Color32(0, 0, 0, 0));\n    }\n\n    public static Color32 GetColour32(string key, Color32 defaultValue)\n    {\n        Color32 returnValue = new Color32();\n        returnValue.r = (byte)PlayerPrefs.GetInt("NewPPrefs:Colour32:" + key + "-r", defaultValue.r);\n        returnValue.g = (byte)PlayerPrefs.GetInt("NewPPrefs:Colour32:" + key + "-g", defaultValue.g);\n        returnValue.b = (byte)PlayerPrefs.GetInt("NewPPrefs:Colour32:" + key + "-b", defaultValue.b);\n        returnValue.a = (byte)PlayerPrefs.GetInt("NewPPrefs:Colour32:" + key + "-a", defaultValue.a);\n        return returnValue;\n    }\n    //############################################# Vector2 #############################################\n\n    //Store Vector2 data as as x & y floats\n    public static void SetVector2(string key, Vector2 value)\n    {\n        PlayerPrefs.SetFloat("NewPPrefs:Vector2:" + key + "-x", value.x);\n        PlayerPrefs.SetFloat("NewPPrefs:Vector2:" + key + "-y", value.y);\n    }\n\n    //Rebuild Vector2 from floats\n    public static Vector2 GetVector2(string key)\n    {\n        return GetVector2(key, Vector2.zero);\n    }\n\n    public static Vector2 GetVector2(string key, Vector2 defaultValue)\n    {\n        Vector2 returnValue;\n        returnValue.x = PlayerPrefs.GetFloat("NewPPrefs:Vector2:" + key + "-x", defaultValue.x);\n        returnValue.y = PlayerPrefs.GetFloat("NewPPrefs:Vector2:" + key + "-y", defaultValue.y);\n        return returnValue;\n    }\n\n    //############################################# Vector3 #############################################\n\n    //Store Vector3 data as as x, y & z floats\n    public static void SetVector3(string key, Vector3 value)\n    {\n        PlayerPrefs.SetFloat("NewPPrefs:Vector3:" + key + "-x", value.x);\n        PlayerPrefs.SetFloat("NewPPrefs:Vector3:" + key + "-y", value.y);\n        PlayerPrefs.SetFloat("NewPPrefs:Vector3:" + key + "-z", value.z);\n    }\n\n    //Rebuild Vector3 from floats\n    public static Vector3 GetVector3(string key)\n    {\n        return GetVector3(key, Vector3.zero);\n    }\n\n    public static Vector3 GetVector3(string key, Vector3 defaultValue)\n    {\n        Vector3 returnValue;\n        returnValue.x = PlayerPrefs.GetFloat("NewPPrefs:Vector3:" + key + "-x", defaultValue.x);\n        returnValue.y = PlayerPrefs.GetFloat("NewPPrefs:Vector3:" + key + "-y", defaultValue.y);\n        returnValue.z = PlayerPrefs.GetFloat("NewPPrefs:Vector3:" + key + "-z", defaultValue.z);\n        return returnValue;\n    }\n\n    //############################################# Vector4 #############################################\n\n    //Store Vector4 data as as x, y, z & w floats\n    public static void SetVector4(string key, Vector4 value)\n    {\n        PlayerPrefs.SetFloat("NewPPrefs:Vector4:" + key + "-x", value.x);\n        PlayerPrefs.SetFloat("NewPPrefs:Vector4:" + key + "-y", value.y);\n        PlayerPrefs.SetFloat("NewPPrefs:Vector4:" + key + "-z", value.z);\n        PlayerPrefs.SetFloat("NewPPrefs:Vector4:" + key + "-w", value.w);\n    }\n\n    //Rebuild Vector4 from floats\n    public static Vector4 GetVector4(string key)\n    {\n        return GetVector4(key, Vector4.zero);\n    }\n\n    public static Vector4 GetVector4(string key, Vector4 defaultValue)\n    {\n        Vector4 returnValue;\n        returnValue.x = PlayerPrefs.GetFloat("NewPPrefs:Vector4:" + key + "-x", defaultValue.x);\n        returnValue.y = PlayerPrefs.GetFloat("NewPPrefs:Vector4:" + key + "-y", defaultValue.y);\n        returnValue.z = PlayerPrefs.GetFloat("NewPPrefs:Vector4:" + key + "-z", defaultValue.z);\n        returnValue.w = PlayerPrefs.GetFloat("NewPPrefs:Vector4:" + key + "-w", defaultValue.w);\n        return returnValue;\n    }\n\n    //############################################ Quaternion ############################################\n\n    //For simplicity we are just going to put Quaternions into Vector3s with "Quaternion" before the key\n    public static void SetQuaternion(string key, Quaternion value)\n    {\n        SetVector3("Quaternion:" + key, value.eulerAngles);\n    }\n\n    public static Quaternion GetQuaternion(string key)\n    {\n        return Quaternion.Euler(GetVector3("Quaternion:" + key, Quaternion.identity.eulerAngles));\n    }\n\n    public static Quaternion GetQuaternion(string key, Quaternion defaultValue)\n    {\n        return Quaternion.Euler(GetVector3("Quaternion:" + key, defaultValue.eulerAngles));\n    }\n\n    //############################################### Rect ###############################################\n\n    //Similar to Quaternions we are just going to put Rects into Vector4s with "Rect" before the key\n    public static void SetRect(string key, Rect value)\n    {\n        SetVector4("Rect:" + key, new Vector4(value.x, value.y, value.width, value.height));\n    }\n\n    public static Rect GetRect(string key)\n    {\n        Vector4 v4 = GetVector4("Rect:" + key, Vector4.zero);\n        return new Rect(v4.x, v4.y, v4.z, v4.w);\n    }\n\n    public static Rect GetRect(string key, Rect defaultValue)\n    {\n        Vector4 v4 = GetVector4("Rect:" + key, new Vector4(defaultValue.x, defaultValue.y, defaultValue.width, defaultValue.height));\n        return new Rect(v4.x, v4.y, v4.z, v4.w);\n    }\n}\n\n\npublic class PlayerPrefs : NewPPrefs { }\n\npublic class PPP : NewPPrefs { }\n\npublic class MonoBehaviour { }\n\npublic struct Vector2\n{\n    public float x;\n    public float y;\n\n    public Vector2(float x, float y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    public static Vector2 operator+(Vector2 v1, Vector2 v2)\n    {\n        return new Vector2(v1.x + v2.x, v1.y + v2.y);\n    }\n\n    public static Vector2 zero = new Vector2(0, 0);\n}\n\npublic struct Vector3\n{\n    public Vector3(float x, float y, float z)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public float x, y, z;\n\n    public static Vector3 operator+ (Vector3 l, Vector3 r)\n    {\n        return new Vector3(l.x + r.x, l.y + r.y, l.z + r.z);\n    }\n\n    public static Vector3 operator* (Vector3 l, Vector3 r)\n    {\n        return new Vector3(l.x * r.x, l.y * r.y, l.z * r.z);\n    }\n\n    public static Vector3 operator* (Vector3 l, float r)\n    {\n        return new Vector3(l.x * r, l.y * r, l.z * r);\n    }\n    public static Vector3 zero = new Vector3(0, 0, 0);\n}\n\npublic struct Vector4\n{\n    public Vector4(float x, float y, float z, float a)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = a;\n    }\n\n    public float x, y, z, w;\n\n    public static Vector4 operator+ (Vector4 l, Vector4 r)\n    {\n        return new Vector4(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w);\n    }\n\n    public static Vector4 operator* (Vector4 l, Vector4 r)\n    {\n        return new Vector4(l.x * r.x, l.y * r.y, l.z * r.z, l.w + r.w);\n    }\n\n    public static Vector4 operator* (Vector4 l, float r)\n    {\n        return new Vector4(l.x * r, l.y * r, l.z * r, l.w * r);\n    }\n\n    public static Vector4 zero = new Vector4(0, 0, 0, 0);\n}\n\npublic struct Rect\n{\n    public float x, y, width, height;\n\n    public Rect(float x, float y, float width, float height)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n}\n\npublic class Color32\n{\n    public int r, g, b, a;\n\n    public Color32(int r = 0, int g = 0, int b = 0, int a = 0)\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n}\n\npublic class Color\n{\n    public float r, g, b, a;\n\n    public Color(float r = 0, float g = 0, float b = 0, float a = 0)\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    public static Color clear = new Color();\n}\n\npublic class Quaternion\n{\n    public static Quaternion Euler(float x, float y, float z)\n    {\n        return new Quaternion();\n    }\n\n    public static Quaternion Euler(Vector3 v)\n    {\n        return Euler(v.x, v.y, v.z);\n    }\n\n    public Vector3 eulerAngles;\n\n    public static Quaternion identity = new Quaternion();\n}\n\npublic class Program\n{\n  public static void Main()\n  {\n    \n  }\n}', 'CS0163@1': 'class Program\n{\n    static void Main(string[] args)\n    {\n        string destination = "default";\n        switch (destination)\n        {\n            case "Inventory":\n                AddToInventory();\n                break;\n            case "Hotbar":\n                AddToHotbar();\n                break;\n            default:\n                Debug.Log("Destination Unknown");\n                break;\n        }\n    }\n    static void AddToInventory()\n    {\n    }\n    static void AddToHotbar()\n    {\n    }\n}\n\nclass Debug\n{\n    public static void Log(string v)\n    {\n    }\n}', 'CS0163@4': 'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace testscores\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string myChoice="";\n            switch (myChoice)\n            {\n                case "K":\n                case "k":\n                    Console.WriteLine("You have chosen the Kanto region");\n                    break;\n                case "O":\n                case "o":\n                    Console.WriteLine("You have chosen the Orange Islands");\n                    break;\n                case "J":\n                case "j":\n                    Console.WriteLine("You have chosen the Johto region");\n                    break;\n                case "H":\n                case "h":\n                    Console.WriteLine("You have chosen the Hoenn region");\n                    break;\n                case "S":\n                case "s":\n                    Console.WriteLine("You have chosen the Sinoh region");\n                    break;\n                case "U":\n                case "u":\n                    Console.WriteLine("You have chosen the Unova region");\n                    break;\n                case "R":\n                case "r":\n                    Console.WriteLine("Return");\n                    break;\n                default:\n                    Console.WriteLine("{0} is not a valid choice", myChoice);\n                    break;\n            }\n        }\n    }\n}', 'CS0163@3': '// CS0163.cs  \nusing System;\n\npublic class MyClass\n{\n    public static void Main()\n    {\n        int i = 0;\n\n        switch (i)   // CS0163  \n        {\n            // Compiler error CS0163 is reported on the following line.  \n            case 1:\n                i++;\n            // To resolve the error, uncomment one of the following example statements.  \n            // return;  \n            // break;  \n            // goto case 3;  \n                break;\n            case 2:\n                i++;\n                return;\n\n            case 3:\n                i = 0;\n                return;\n\n            // Compiler error CS0163 is reported on the following line.  \n            default:\n                Console.WriteLine("Default");\n                // To resolve the error, uncomment the following line:  \n                break;  \n        }\n    }\n} ', 'CS0163@2': 'class Program\n{\n    static void Main(string[] args)\n    {\n        string destination = "default";\n        switch (destination)\n        {\n            case "Inventory":\n                AddToInventory();\n                break;\n            case "Hotbar":\n                AddToHotbar();\n                break;\n            default:\n                Debug.Log("Destination Unknown");\n                break;\n        }\n    }\n    static void AddToInventory()\n    {\n    }\n    static void AddToHotbar()\n    {\n    }\n}\n\nclass Debug\n{\n    public static void Log(string v)\n    {\n    }\n}', 'CS0163@5': 'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace testscores\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string myChoice="";\n            switch (myChoice)\n            {\n                case "K":\n                case "k":\n                    Console.WriteLine("You have chosen the Kanto region");\n                    break;\n                case "O":\n                case "o":\n                    Console.WriteLine("You have chosen the Orange Islands");\n                    break;\n                case "J":\n                case "j":\n                    Console.WriteLine("You have chosen the Johto region");\n                    break;\n                case "H":\n                case "h":\n                    Console.WriteLine("You have chosen the Hoenn region");\n                    break;\n                case "S":\n                case "s":\n                    Console.WriteLine("You have chosen the Sinoh region");\n                    break;\n                case "U":\n                case "u":\n                    Console.WriteLine("You have chosen the Unova region");\n                    break;\n                case "R":\n                case "r":\n                    Console.WriteLine("Return");\n                    break;\n                default:\n                    Console.WriteLine("{0} is not a valid choice", myChoice);\n                    break;\n            }\n        }\n    }\n}'}